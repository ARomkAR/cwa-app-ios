// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: internal/key_download_parameters.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Cwa_Internal_V2_KeyDownloadParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var numberOfRetriesPerFile: Int32 = 0

  var httpTimeoutInSeconds: Int32 = 0

  var overallTimeoutInSeconds: Int32 = 0

  var cachedDayPackagesToUpdateOnEtagMismatch: [Cwa_Internal_V2_DayPackageMetadata] = []

  var cachedHourPackagesToUpdateOnEtagMismatch: [Cwa_Internal_V2_HourPackageMetadata] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cwa_Internal_V2_DayPackageMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var region: String = String()

  var date: String = String()

  var etag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Cwa_Internal_V2_HourPackageMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var region: String = String()

  var date: String = String()

  var hour: Int32 = 0

  var etag: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cwa.internal.v2"

extension Cwa_Internal_V2_KeyDownloadParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyDownloadParameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "numberOfRetriesPerFile"),
    2: .same(proto: "httpTimeoutInSeconds"),
    3: .same(proto: "overallTimeoutInSeconds"),
    4: .same(proto: "cachedDayPackagesToUpdateOnETagMismatch"),
    5: .same(proto: "cachedHourPackagesToUpdateOnETagMismatch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.numberOfRetriesPerFile) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.httpTimeoutInSeconds) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.overallTimeoutInSeconds) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.cachedDayPackagesToUpdateOnEtagMismatch) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.cachedHourPackagesToUpdateOnEtagMismatch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.numberOfRetriesPerFile != 0 {
      try visitor.visitSingularInt32Field(value: self.numberOfRetriesPerFile, fieldNumber: 1)
    }
    if self.httpTimeoutInSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.httpTimeoutInSeconds, fieldNumber: 2)
    }
    if self.overallTimeoutInSeconds != 0 {
      try visitor.visitSingularInt32Field(value: self.overallTimeoutInSeconds, fieldNumber: 3)
    }
    if !self.cachedDayPackagesToUpdateOnEtagMismatch.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cachedDayPackagesToUpdateOnEtagMismatch, fieldNumber: 4)
    }
    if !self.cachedHourPackagesToUpdateOnEtagMismatch.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cachedHourPackagesToUpdateOnEtagMismatch, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cwa_Internal_V2_KeyDownloadParameters, rhs: Cwa_Internal_V2_KeyDownloadParameters) -> Bool {
    if lhs.numberOfRetriesPerFile != rhs.numberOfRetriesPerFile {return false}
    if lhs.httpTimeoutInSeconds != rhs.httpTimeoutInSeconds {return false}
    if lhs.overallTimeoutInSeconds != rhs.overallTimeoutInSeconds {return false}
    if lhs.cachedDayPackagesToUpdateOnEtagMismatch != rhs.cachedDayPackagesToUpdateOnEtagMismatch {return false}
    if lhs.cachedHourPackagesToUpdateOnEtagMismatch != rhs.cachedHourPackagesToUpdateOnEtagMismatch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cwa_Internal_V2_DayPackageMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DayPackageMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "date"),
    3: .same(proto: "etag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.date) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 1)
    }
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 2)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cwa_Internal_V2_DayPackageMetadata, rhs: Cwa_Internal_V2_DayPackageMetadata) -> Bool {
    if lhs.region != rhs.region {return false}
    if lhs.date != rhs.date {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cwa_Internal_V2_HourPackageMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HourPackageMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "date"),
    3: .same(proto: "hour"),
    4: .same(proto: "etag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.date) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.hour) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 1)
    }
    if !self.date.isEmpty {
      try visitor.visitSingularStringField(value: self.date, fieldNumber: 2)
    }
    if self.hour != 0 {
      try visitor.visitSingularInt32Field(value: self.hour, fieldNumber: 3)
    }
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cwa_Internal_V2_HourPackageMetadata, rhs: Cwa_Internal_V2_HourPackageMetadata) -> Bool {
    if lhs.region != rhs.region {return false}
    if lhs.date != rhs.date {return false}
    if lhs.hour != rhs.hour {return false}
    if lhs.etag != rhs.etag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
